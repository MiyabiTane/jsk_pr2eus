<launch>
  <arg name="gui" default="true"/>
  <arg name="run_rviz" default="false" />
  <arg name="gazebo" default="false" />
  <arg name="publish_objects_tf" default="true" />
  <arg name="launch_tracking" default="false" />
  <arg name="manager" default="pr2_deco_nodelet_manager"/>

  <arg name="physics" default="ode" />
  <arg name="machine" value="localhost" />
  <!-- arg name="machine" default="c2" / -->
  
  <group if="$(arg gazebo)">
    <include file="$(find pr2eus_tutorials)/launch/gazebo/pr2_deco_scene.launch">
      <arg name="gui" value="$(arg gui)"/>
      <arg name="physics" value="$(arg physics)" />
    </include>
    <node name="speech_to_text_mux" pkg="topic_tools" type="mux"
	  args="/speech_to_text /speech_to_text_google /speech_to_text_julius /speech_to_text_other" >
      <remap from="mux" to="speech_to_text_mux"/>
    </node>
    <!-- Spawn models into gazebo -->
    <node name="spawn_demo_cube_yellow" pkg="gazebo_ros" type="spawn_model"
          args="-file $(find pr2eus_tutorials)/models/demo_cube_yellow/model.sdf -sdf
                -x -1.3 -y 0.0 -z 0.8 -model demo_cube_yellow" />
    <node name="spawn_demo_cube_red" pkg="gazebo_ros" type="spawn_model"
          args="-file $(find pr2eus_tutorials)/models/demo_cube_red/model.sdf -sdf
                -x -1.3 -y 0.5 -z 0.8 -model demo_cube_red" />
    <node name="spawn_demo_cube_green" pkg="gazebo_ros" type="spawn_model"
          args="-file $(find pr2eus_tutorials)/models/demo_cube_green/model.sdf -sdf
                -x -1.3 -y -0.5 -z 0.8 -model demo_cube_green" />
  </group>

  <!-- group unless="$(arg gazebo)">
    <include file="$(find pr2_machine)/$(env ROBOT).machine" / -->
  <!-- /group -->

  <!-- extract attention points -->
  <node name="attention_clipper"
        pkg="nodelet" type="nodelet" respawn="true"
        args="load jsk_pcl/AttentionClipper $(arg manager)">
    <remap from="~input/points" to="/kinect_head/depth_registered/throttled/points" />
    <rosparam>
      initial_pos: [1.0, 0, 0.5]
      initial_rot: [0, 0, 0]
      dimension_x: 2.0
      dimension_y: 2.0
      dimension_z: 1.5
      frame_id: base_footprint
    </rosparam >
  </node>

  <node name="extract_indices"
        pkg="nodelet" type="nodelet" respawn="true"
        args="load jsk_pcl/ExtractIndices $(arg manager)">
    <remap from="~input" to="/kinect_head/depth_registered/throttled/points" />
    <remap from="~indices" to="attention_clipper/output/point_indices" />
    <rosparam>
      keep_organized: true
    </rosparam>
  </node>

  <!-- tabletop_object_detector -->
  <include file="$(find jsk_pcl_ros)/sample/tabletop_object_detector.launch">
    <arg name="input" value="/extract_indices/output" />
    <arg name="sensor_frame" value="/head_mount_kinect_rgb_optical_frame" />
    <arg name="manager" value="$(arg manager)" />
    <arg name="machine" value="$(arg machine)" />
    <arg name="launch_openni" value="false" />
    <arg name="launch_tracking" value="$(arg launch_tracking)" />
    <arg name="launch_rviz" value="false" />
    <arg name="publish_tf" value="$(arg publish_objects_tf)" />
  </include>

  <!-- 2Dpoint -> 3Dpoint -->
  <node name="pointcloud_screenpoint_nodelet" pkg="nodelet" type="nodelet"
        args="load jsk_pcl/PointcloudScreenpoint $(arg manager)"
        output="screen" clear_params="true" respawn="true"
        machine="$(arg machine)">
    <remap from="~points" to="/kinect_head/depth_registered/throttled/points" />
    <remap from="~point" to="/kinect_head/rgb/throttled/image_rect_color/screenpoint" />
    <rosparam>
      queue_size: 10
      crop_size: 10
      search_size: 16
    </rosparam>
  </node>

  <!-- ChaPlus -->
  <!-- node name="relay_sound"
	pkg="pr2eus_tutorials" type="relay_sound_with_flag.py"
	output="screen" respawn="false">
    <remap from="~input" to="/speech_to_text" />
    <remap from="~output" to="/request" />
   </node -->

  <!-- arg name="chatbot_engine" default="Chaplus" />
  <node pkg="chaplus_ros" type="chaplus_ros_custom.py" name="chaplus_ros"
        output="screen" >
    <rosparam subst_value="true">
      chatbot_engine: $(arg chatbot_engine)
    </rosparam>
  </node -->

  <!-- node to convert /response (std_msgs/String) to /robotsound_jp (sound_play/SoundRequest) -->
  <node pkg="topic_tools" type="relay_field" name="string_to_sound_request"
	args="--wait-for-start /response /robotsound_jp sound_play/SoundRequest
       '{sound: -3, command: 1, volume: 1.0, arg: m.data}'" />

  <!-- think decoration -->
  <node name="think_deco"
	pkg = "pr2eus_tutorials" type="think_deco_node.py"
	output = "screen" respawn="false">
  </node>

  <!-- launch rviz -->
  <group if="$(arg run_rviz)">
    <node pkg="rviz" name="pr2_rviz" type="rviz"
          args="-d $(find pr2eus_tutorials)/config/pr2_deco.rviz" />
    <!-- node name="pr2_interactive_object_grasp_2d_node" pkg="image_view2" type="image_view2" >
	 <remap from="image" to="/kinect_head/rgb/throttled/image_rect_color" />
	 <remap from="camera_info" to="/head_mount_kinect/rgb/camera_info" />
    </node -->
  </group>

  <!-- virtual force for left arm -->
    <!-- group ns="left_endeffector">
      <arg name="publish_frequency" default="50.0"/>
      <arg name="time_constant" default="0.3"/>
      <arg name="root" default="torso_lift_link"/>
      <arg name="tip"  default="l_gripper_tool_frame"/>
      <arg name="input" default="joint_states"/>
      <node pkg="virtual_force_publisher" type="virtual_force_publisher" name="virtual_force_publisher">
	<remap from="joint_states" to="/$(arg input)"/>
	<param name="publish_frequency" value="$(arg publish_frequency)"/>
	<param name="time_constant" value="$(arg time_constant)"/>
	<param name="root" value="$(arg root)"/>
	<param name="tip" value="$(arg tip)"/>
      </node>
    </group -->

    <!-- virtual force for right arm -->
    <!-- group ns="right_endeffector">
      <arg name="publish_frequency" default="50.0"/>
      <arg name="time_constant" default="0.3"/>
      <arg name="root" default="torso_lift_link"/>
      <arg name="tip"  default="r_gripper_tool_frame"/>
      <arg name="input" default="joint_states"/>
      <node pkg="virtual_force_publisher" type="virtual_force_publisher" name="virtual_force_publisher">
	<remap from="joint_states" to="/$(arg input)"/>
	<param name="publish_frequency" value="$(arg publish_frequency)"/>
	<param name="time_constant" value="$(arg time_constant)"/>
	<param name="root" value="$(arg root)"/>
	<param name="tip" value="$(arg tip)"/>
      </node>
    </group -->
  
</launch>
