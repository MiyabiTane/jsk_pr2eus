#!/usr/bin/env roseus

(setq *screenpoint-pub-topic* "/kinect_head/rgb/throttled/image_rect_color/screenpoint")
(setq *screenpoint-sub-topic* "/pointcloud_screenpoint_nodelet/output_point")
(setq *camera-frame* "head_mount_kinect_rgb_optical_frame")
(setq *base-frame* "base_footprint")
(ros::advertise *screenpoint-pub-topic* geometry_msgs::PointStamped 1)
(ros::rate 10)

(defun send-robot (wait_time)
  (send *ri* :angle-vector (send *pr2* :angle-vector) wait_time)
  (send *ri* :wait-interpolation)
  )

(defun set-arm-end-pos ()
  (let* ((arm_end_pos #f(0 0 0)))
    (setq cur_rpos (send (send (send *pr2* :rarm :end-coords) :copy-worldcoords) :pos))
    (setq cur_lpos (send (send (send *pr2* :larm :end-coords) :copy-worldcoords) :pos))
    (setq arm_end_pos (scale 0.5 (v+ cur_rpos cur_lpos)))
    arm_end_pos)
  )

(defun plane-norm-cb (msg)
  (setq poses_msg (send msg :poses))
  (when (> (length poses_msg) 0)
    (setq pose_msg (elt poses_msg 0))
    (setq pos_msg (send pose_msg :position))
    (setq vec_msg (send pose_msg :orientation))
    (setq norm_coords (send (send *tfl* :lookup-transform *base-frame-id* *camera-frame-id* (ros::time 0)) 			  :transform (ros::tf-pose->coords pose_msg)))
    ;; (format t "norm_coords: ~A~%" norm_coords)
    ;; (format t "pos: ~A, rot: ~A~%" (send norm_coords :pos) (send norm_coords :rot))
    (setq norm_rpy (elt (rpy-angle (send norm_coords :rot)) 0))
    ;; (format t "norm_rpy: ~A~%" norm_rpy)
    )
  )

(defun go-vel-rotate (move_rad)
  ;;warning!! if the degree is large, this funcdoes not correct
  ;; memo: (/ pi 6) -> 2100, (/ pi 4) -> 2650
  (setq move_time 2650)
  (cond ((< (abs move_rad) (/ pi 6))
 	 (setq move_time (abs (* (/ move_rad (/ pi 6)) 2100))))
 	((< (abs move_rad) (/ pi 4))
 	 (setq move_time (+ 2100 (* 550 (/ (- move_rad (/ pi 6)) (/ pi 12)))))))
  (send *ri* :go-velocity 0 0 move_rad move_time :wait t)
  )

(defun rotate-ref-box ()
  ;; (send norm_coords_cp :locate #f(500 0 0) :world)
  (setq base_box (make-cube 50 50 50))
  (setq virtual_box (make-cube 50 50 50))
  (send virtual_box :locate #f(0 0 500) :world)
  (send base_box :assoc virtual_box)
  (send base_box :newcoords (make-coords :rpy norm_rpy))
  ;; (objects (list *pr2* base_box virtual_box))
  (setq vbox_pos (send (send virtual_box :copy-worldcoords) :pos))
  (format t "vbox_pos ~A~%" vbox_pos)
  (setq vbox_xpos (elt vbox_pos 0))
  (setq vbox_ypos (elt vbox_pos 1))
  ;; (go-vel-rotate (atan (/ vbox_ypos vbox_xpos)))
  (if (> vbox_ypos 0)
      (send *ri* :go-velocity 0 0 (/ pi 20) 500 :wait t)
    (send *ri* :go-velocity 0 0 (* -1 (/ pi 20)) 500 :wait t))
  )

(defun rotate-ref-wall ()
  (ros::subscribe *plane-norm-topic* geometry_msgs::PoseArray #'plane-norm-cb)
  (setq vbox_ypos 100)
  (while (> (abs vbox_ypos) 50)
    (setq pose_msg nil)
    (while (not pose_msg)
      (ros::spin-once)
      (ros::sleep))
    (rotate-ref-box))
  (ros::unsubscribe *plane-norm-topic*)
  )

(defun go-vel-linear (move_x)
  ;; 818.54 -> 3000ms (818.54 -> 820)
  (setq move_time (abs (* (/ move_x 820.0) 3000)))
  ;; (format t "go-vel-linear move: ~A, time: ~A~%" move_x move_time)
  (send *ri* :go-velocity move_x 0 0 move_time :wait t)
  ;; (send *ri* :wait-interpolation)
  )

(defun set-init-pose ()
  ;; (send *pr2* :reset-manip-pose)
  ;; (send *pr2* :torso_lift_joint :joint-angle (- (send *pr2* :torso_lift_joint :joint-angle) 100))
  ;; (send *pr2* :head :look-at #f(500 0 1400))
  (send *pr2* :angle-vector #f(200.0 75.0 50.0 110.0 -110.0 -20.0 -10.0 -10.0 -75.0 50.0 -110.0 -110.0 20.0 -10.0 -10.0 0.0 11.8786))
  (send-robot 5000)
  )

(defun move-arm-out-of-view (look_at_pos)
  (setq cur_torso_joint (send *pr2* :torso_lift_joint :joint-angle))
  (send *pr2* :angle-vector #f(11.5 80.0 73.2972 3.97331 -121.542 -170.266 -5.72958 0.0 -80.0 73.297 -3.98539 -121.542 170.26 -5.72958 0.0 0.0 11.8773))
  (send *pr2* :torso_lift_joint :joint-angle cur_torso_joint)
  (send *pr2* :head :look-at look_at_pos)
  )

(defun screen-pos-cb (msg)
  (setq coords (make-coords :pos (ros::tf-point->pos (send msg :point))))
  (send coords :transform
	(send *tfl* :lookup-transform *base-frame* *camera-frame* (ros::time 0)) :world)
  (setq result_3d_pos (send coords :pos))
  (setq cur_x (elt result_3d_pos 0))
  (when (not (= pre_x cur_x))
    (setq flag 1)
    (setq pre_x cur_x))
  )

(defun convert-2D->3D (x y)
  ;; use pointcloud_screenpoint_nodelet
  (ros::subscribe *screenpoint-sub-topic* geometry_msgs::PointStamped #'screen-pos-cb)
  (setq pub-msg (instance geometry_msgs::PointStamped :init))
  (send pub-msg :header :stamp (ros::time-now))
  (send pub-msg :header :frame_id *camera-frame*)
  (send (send pub-msg :point) :x x)
  (send (send pub-msg :point) :y y)
  (setq flag 0)
  (while (= flag 0)
    (ros::publish *screenpoint-pub-topic* pub-msg)
    (ros::spin-once)
    (ros::sleep))
  ;; result 3D pos: result_3d_pos
  )
