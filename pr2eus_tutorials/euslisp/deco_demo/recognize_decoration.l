;; set pub sub topics
(ros::roseus-add-msgs "pr2eus_tutorials")
(setq *dimgs-pub-topic* "/save_deco_imgs/input")

(ros::load-ros-package "jsk_recognition_msgs")
(defvar *base-frame-id* "/base_footprint")
(defvar *bounding-box-list* "/segmentation_decomposer/boxes")
(ros::advertise *dimgs-pub-topic* pr2eus_tutorials::DecoImages 1)
(ros::rate 10)

(defun before-recog-pose ()
  (setq cur_torso_angle (send *pr2* :torso_lift_joint :joint-angle))
  (before-catch-pose)
  (send *pr2* :head :look-at #f(500 0 1400))
  (send *pr2* :torso_lift_joint :joint-angle cur_torso_angle)
  (send-robot 5000)
  )

(defun tf-pose->coords (frame_id pose)
  (send (send *tfl* :lookup-transform *base-frame-id* frame_id (ros::time 0))
        :transform (ros::tf-pose->coords pose)))

(defun bbox->cube (bbox)
  (let* ((dims (ros::tf-point->pos (send bbox :dimensions)))
         (bx (make-cube (elt dims 0) (elt dims 1) (elt dims 2))))
    (send bx :newcoords
          (tf-pose->coords (send bbox :header :frame_id) (send bbox :pose)))
    bx))

(defun debug_vis_boxes (i)
  (setq debug_lst '())
  (setq dims (elt deco_size_lst i))
  (setq pos (elt deco_coords_lst i))
  (setq debug_cube (make-cube (elt dims 0) (elt dims 1) (elt dims 2)))
  (send debug_cube :move-to pos :world)
  (objects (list *pr2* debug_cube))
  )

(defun bbox->lst (bbox)
  (let* ((pos #f(0 0 0))
	 (dims #f(0 0 0)))
    (setq coords (tf-pose->coords (send bbox :header :frame_id) (send bbox :pose)))
    (setq pos (send coords :pos))
    (setq dims (ros::tf-point->pos (send bbox :dimensions)))
    (format t "coords: ~A~%" coords)
    (format t "dims: ~A~%" dims)
    (list coords dims))
  )

(defun find-boxes ()
  (ros::duration-sleep 1.0)
  (setq bboxes_msg (one-shot-subscribe *bounding-box-list*
				       jsk_recognition_msgs::BoundingBoxArray
				       :after-stamp (ros::time-now)))
  (setq bboxes (send bboxes_msg :boxes))
  (if (= (send (send (send (elt bboxes 0) :pose) :position) :x) 0)
      (setq bboxes '()))
  )

(defun if-dup-box (bbox_coords bbox_dims)
  (let* ((dup_flag nil)
	 (bbox_pos (send bbox_coords :pos)))
    (dotimes (i (length deco_coords_lst))
      (setq box_distance (norm (v- (send (elt deco_coords_lst i) :pos) bbox_pos)))
      (if (or (< box_distance (elt bbox_dims 0)) (< box_distance (elt bbox_dims 1)))
	  (setq dup_flag t)))
    dup_flag)
  )

(defun find-decoration ()
  (setq bboxes '())
  (dotimes (i 6)
    (send *ri* :go-velocity 0 0 (/ pi 6) 2000 :wait t)
    (send *ri* :wait-interpolation))
  (find-boxes)
  (while (< (length bboxes) 1)
    (send *ri* :go-velocity 0 0 (/ pi 10) 2000 :wait t)
    (send *ri* :wait-interpolation)
    (find-boxes)
    )
  (setq deco_pos (calc-mean-pos bboxes))
  (setq move_len (norm deco_pos))
  (setq move_rad (atan (/ (elt deco_pos 1) (elt deco_pos 0))))
  (format t "center pos: ~A -> len: ~A, rot: ~A~%" deco_pos move_len (rad2deg move_rad))
  (send *ri* :go-velocity 0 0 move_rad 2000 :wait t)
  (send *ri* :wait-interpolation)
  (send *ri* :go-velocity move_len 0 0 3000 :wait t)
  (send *ri* :wait-interpolation)
  ;; ToDo 手前目にしてtorsoを上げる
  )

(defun calc-mean-pos (bboxes)  ;; find center box pos
  (let* ((mean_x 0)
	 (mean_y 0)
	 (mean_z 0)
	 (box_num (length bboxes))
	 (mean_pos #f(0 0 0)))
    (dotimes (i box_num)
      (setq coords_dims_lst (bbox->lst (elt bboxes i)))
      (setq pos (send (elt coords_dims_lst 0) :pos))
      (setq mean_x (+ mean_x (elt pos 0)))
      (setq mean_y (+ mean_y (elt pos 1)))
      (setq mean_z (+ mean_z (elt pos 2))))
    (setq mean_pos (float-vector mean_x mean_y 0))
    (setq mean_pos (scale (/ 1.0 box_num) mean_pos))
    mean_pos)
  )

(defun close-table ()
  (set-arm-end-coords)
  (send *pr2* :l_wrist_flex_joint :joint-angle -114)  ;; original: -37.3571
  (send *pr2* :r_wrist_flex_joint :joint-angle -114)
  (send-robot 4000)
  (setq mean_pos (calc-mean-pos))
  (setq deco_pos (v- mean_pos #f(100 0 0)))
  (setq deco_spot (make-coords :pos deco_pos :rpy #f(0 0 0)))
  (send *ri* :move-to deco_spot)
  ;; (setq move_x (- (elt mean_pos 0) (elt arm_end_coords 0)))
  ;; (setq move_y (- (elt mean_pos 1) (elt arm_end_coords 1)))
  ;; (format t "move_x: ~A, move_y: ~A~%" move_x move_y)
  ;; (send *ri* :go-velocity move_x move_y 0)
  ;; (ros::sleep 5)
  ;; (send *ri* :go-velocity 0 0 (atan (/ move_y move_x)))
  ;; (send *ri* :wait-interpolation)
  ;; (send *ri* :go-velocity (norm (float-vector move_x move_y 0)) 0 0)
  ;; (send *ri* :wait-interpolation)
  ;; lift up
  (setq up_length (- (elt mean_pos 2) (elt arm_end_coords 2)))
  (setq lift_angle (+ (send *pr2* :torso_lift_joint :joint-angle) up_length))
  (send *pr2* :torso_lift_joint :joint-angle lift_angle)
  (send *pr2* :head :look-at (v+ arm_end_coords #f(50 0 0)))
  (send-robot 4000)
  )

;; send images to think_deco node

