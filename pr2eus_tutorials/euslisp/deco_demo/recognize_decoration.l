#!/usr/bin/env roseus

;; set pub sub topics
(defvar *bounding-box-list* "/segmentation_decomposer/boxes")
(defvar *rgb-image-topic* "/kinect_head/rgb/throttled/image_rect_color")
(ros::rate 10)

(defun before-recog-pose ()
  (setq cur_torso_angle (send *pr2* :torso_lift_joint :joint-angle))
  (before-catch-pose)
  (send *pr2* :head :look-at *look-at-pos*)
  (send *pr2* :torso_lift_joint :joint-angle cur_torso_angle)
  ;; (send-robot 5000)
  )

(defun find-boxes ()
  (let* ((box_msg) (box_coords) (box_z))
    (setq bboxes_header nil)
    (setq bboxes '())
    (ros::duration-sleep 1.0)
    (setq bboxes_msg (one-shot-subscribe *bounding-box-list*
					 jsk_recognition_msgs::BoundingBoxArray
					 :after-stamp (ros::time-now)))
    (setq bboxes_header (send bboxes_msg :header))
    ;; (setq bboxes (send bboxes_msg :boxes))
    (dotimes (i (length (send bboxes_msg :boxes)))
      (setq box_msg (elt (send bboxes_msg :boxes) i))
      (setq box_coords (elt (bbox->lst box_msg) 0))
      ;; (format t "box_coords: ~A~%" box_coords)
      (setq box_z (elt (send box_coords :pos) 2))
      ;; (format t "box_z: ~A~%" box_z)
      (when (> box_z 300)  ;; box on the floor
	(setq bboxes (append bboxes (list box_msg))))
      )
    ;; (format t "bboxes ~A~%" bboxes)
    (when (> (length bboxes) 0)
      (if (= (send (send (send (elt bboxes 0) :pose) :position) :x) 0)
	  (setq bboxes '())))
    )
  )

(defun if-dup-box (bbox_coords bbox_dims)
  (let* ((dup_flag nil)
	 (bbox_pos (send bbox_coords :pos)))
    (dotimes (i (length deco_coords_lst))
      (setq box_distance (norm (v- (send (elt deco_coords_lst i) :pos) bbox_pos)))
      (if (or (< box_distance (elt bbox_dims 0)) (< box_distance (elt bbox_dims 1)))
	  (setq dup_flag t)))
    dup_flag)
  )

(defun calc-mean-pos (bboxes)  ;; find center box pos
  (let* ((mean_x 0)
	 (mean_y 0)
	 (mean_z 0)
	 (box_num (length bboxes))
	 (mean_pos #f(0 0 0)))
    (dotimes (i box_num)
      (setq coords_dims_lst (bbox->lst (elt bboxes i)))
      ;; (format t "coords_dim_lst ~A~%" coords_dims_lst)
      (setq pos (send (elt coords_dims_lst 0) :pos))
      (setq mean_x (+ mean_x (elt pos 0)))
      (setq mean_y (+ mean_y (elt pos 1)))
      (setq mean_z (+ mean_z (elt pos 2))))
    (setq mean_pos (float-vector mean_x mean_y mean_z))
    (setq mean_pos (scale (/ 1.0 box_num) mean_pos))
    mean_pos)
  )

(defun find-decoration (look_at_pos)
  (let* ((deco_count 0)
	 (fin_flag 0)
	 (look_at_pos look_at_pos)
	 (box_mean_pos))
    (send *pr2* :head :look-at look_at_pos)
    (send-robot 3000)
    (dotimes (i 5)
      (go-vel-rotate (/ pi 6)))
    ;; (move-arm-out-of-view #f(500 0 1200))
    ;; (send-robot 5000)
    (while (= fin_flag 0)
      (find-boxes)
      (format t "find ~A boxes~%" (length bboxes))
      (when (< (length bboxes) deco_count)
	(go-vel-rotate (* -1 (/ pi 9)))
	(find-boxes)
	(format t "find ~A boxes~%" (length bboxes))
	(setq fin_flag 1)
	)
      (when (= fin_flag 0)
	(setq deco_count (length bboxes))
	(go-vel-rotate (/ pi 9)))
      )
    ;; rotate
    (setq box_mean_pos (calc-mean-pos bboxes))
    (go-vel-rotate (atan (/ (elt box_mean_pos 1) (elt box_mean_pos 0))))
    (find-boxes)
    (format t "find ~A boxes~%" (length bboxes))
    ))

(defun get-decoration-x ()
  (let* ((deco_x))
    (if (> (length bboxes) 0)
	  (setq deco_x (elt (send (elt (bbox->lst (elt bboxes 0)) 0) :pos) 0))
      (setq deco_x 10000))
    (format t "deco_x ~A~%" deco_x)
    deco_x))

(defun close-decoration (look_at_pos)
  (let* ((fin_flag 0)
	 (deco_count (length bboxes))
	 (mean_pos (calc-mean-pos bboxes))
	 (look_at_pos look_at_pos))
    (send *pr2* :head :look-at mean_pos)
    (send-robot 3000)
    (find-boxes)
    (if (< (length bboxes) deco_count)
	(progn
	  (send *pr2* :head :look-at look_at_pos)
	  (send-robot 1000)
	  (find-boxes))
      (progn
	(while (= fin_flag 0)
	  (go-vel-linear 100)
	  (find-boxes)
	  (setq mean_pos (calc-mean-pos bboxes))
	  (send *pr2* :head :look-at mean_pos)
	  (send-robot 1000)
	  (find-boxes)
	  (format t "find ~A boxes, look at: ~A~%" (length bboxes) mean_pos)
	  (when (or (< (length bboxes) deco_count) (< (get-decoration-x) 1000))
	    (go-vel-linear -100)
	    (send *pr2* :head :look-at look_at_pos)
	    (send-robot 1000)
	    (ros::duration-sleep 3)
	    (find-boxes)
	    (format t "find ~A boxes, look at: ~A~%" (length bboxes) mean_pos)
	    (setq fin_flag 1))
	  (when (= fin_flag 0)
	    (setq deco_count (length bboxes))
	    (setq look_at_pos mean_pos)))
	)
      )
    look_at_pos))

(defun get-deco-image (look_at_pos)
  (let* ((look_at_pos look_at_pos)
	 (bbox_array_msg (instance jsk_recognition_msgs::BoundingBoxArray :init))
	 (look_at_point_msg (instance geometry_msgs::Point :init)))
    ;; Subscribe image_raw
    (setq *image-raw-msg*
	  (one-shot-subscribe "/kinect_head/rgb/throttled/image_rect_color"
			      sensor_msgs::Image
			      :after-stamp (ros::time-now)))
    (send dimg_req_msg :decos_img *image-raw-msg*)
    (send look_at_point_msg :x (elt look_at_pos 0))
    (send look_at_point_msg :y (elt look_at_pos 1))
    (send look_at_point_msg :z (elt look_at_pos 2))
    (send dimg_req_msg :look_at_point look_at_point_msg)
    )
  )

(defun recognize-decoration ()
  (let* ((deco_count 0))
    ;; (before-recog-pose)
    ;; (send-robot 5000)
    (find-decoration (v- *look-at-pos* #f(0 0 100)))
    (setq look_at_pos (close-decoration (v- *look-at-pos* #f(0 0 100))))
    (get-deco-image look_at_pos)
    )
  )

;; send images to think_deco node

;; ---------------------------------------------------
;; arms out of view pose
;; (before-recog-pose)
;; (send *pr2* :l_shoulder_pan_joint :joint-angle 80)
;; (send *pr2* :r_shoulder_pan_joint :joint-angle -80)
;; (send *pr2* :r_wrist_roll_joint :joint-angle 0)
;; (send *pr2* :r_wrist_flex_joint :joint-angle 0)
;; (send *pr2* :r_elbow_flex_joint :joint-angle -125)
;; (send *pr2* :l_wrist_roll_joint :joint-angle 0)
;; (send *pr2* :l_wrist_flex_joint :joint-angle 0)
;; (send *pr2* :l_elbow_flex_joint :joint-angle -125)

(defun test-go-vel ()
   (setq pre_x 0)
   (convert-2D->3D 320 240)
   (setq wall_x cur_x)
   (setq arm_end_pos (set-arm-end-pos))
   (setq move_x (- cur_x (elt arm_end_pos 0)))
   (format t "move_x ~A~%" move_x)
   ;; (send *ri* :go-velocity move_x 0 0 time :wait t)
   ;; (send *ri* :wait-interpolation)
   (go-vel-linear move_x)
   )

(defun close-table ()
  (setq close_offset_x 100)
  (setq up_length_offset 50)
  (setq deco_pos (calc-mean-pos bboxes))
  (setq deco_z (elt deco_pos 2))
  (setq arm_end_pos (set-arm-end-pos))
  ;; (send *pr2* :l_wrist_flex_joint :joint-angle -114)  ;; original: -37.3571
  ;; (send *pr2* :r_wrist_flex_joint :joint-angle -114)
  ;; (send-robot 4000)
  (setq deco_pos (v- deco_pos arm_end_pos))
  (setq deco_pos (float-vector (elt deco_pos 0) (elt deco_pos 1) 0))
  (setq move_len (norm deco_pos))
  (setq move_len (- move_len close_offset_x))
  (setq move_rad (atan (/ (elt deco_pos 1) (elt deco_pos 0))))
  (format t "center pos: ~A -> len: ~A, rot: ~A~%" deco_pos move_len (rad2deg move_rad))
  (go-vel-rotate move_rad)
  ;; lift up
  (setq up_length (- deco_z (elt arm_end_pos 2)))
  (setq up_length (+ up_length up_length_offset))
  (setq lift_angle (+ (send *pr2* :torso_lift_joint :joint-angle) up_length))
  (format t "up torso: ~A~%" up_length)
  (send *pr2* :torso_lift_joint :joint-angle lift_angle)
  (send-robot 4000)
  (go-vel-linear move_len)
  (setq look_at_pos (set-arm-end-pos))  ;; use in get-deco-image
  (format t "look at ~A~%" look_at_pos)
  )
