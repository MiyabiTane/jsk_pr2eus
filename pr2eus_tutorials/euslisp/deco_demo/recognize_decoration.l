;; set pub sub topics
(ros::roseus-add-msgs "pr2eus_tutorials")
(setq *dimgs-pub-topic* "/save_deco_imgs/input")

(defvar *bounding-box-list* "/segmentation_decomposer/boxes")
(defvar *rgb-image-topic* "/kinect_head/rgb/throttled/image_rect_color")
(ros::advertise *dimgs-pub-topic* pr2eus_tutorials::DecoImages 1)
(ros::rate 10)

(defun before-recog-pose ()
  (setq cur_torso_angle (send *pr2* :torso_lift_joint :joint-angle))
  (before-catch-pose)
  (send *pr2* :head :look-at #f(500 0 1200))
  (send *pr2* :torso_lift_joint :joint-angle cur_torso_angle)
  (send-robot 5000)
  )

(defun tf-pose->coords (frame_id pose)
  (send (send *tfl* :lookup-transform *base-frame-id* frame_id (ros::time 0))
        :transform (ros::tf-pose->coords pose)))

(defun bbox->cube (bbox)
  (let* ((dims (ros::tf-point->pos (send bbox :dimensions)))
         (bx (make-cube (elt dims 0) (elt dims 1) (elt dims 2))))
    (send bx :newcoords
          (tf-pose->coords (send bbox :header :frame_id) (send bbox :pose)))
    bx))

(defun view-debug-box (i)
  (setq debug_cube (bbox->cube (elt bboxes i)))
  (objects (list *pr2* debug_cube))
  )

(defun bbox->lst (bbox)
  (let* ((pos #f(0 0 0))
	 (dims #f(0 0 0)))
    (setq coords (tf-pose->coords (send bbox :header :frame_id) (send bbox :pose)))
    (setq pos (send coords :pos))
    (setq dims (ros::tf-point->pos (send bbox :dimensions)))
    ;; (format t "coords: ~A~%" coords)
    ;; (format t "dims: ~A~%" dims)
    (list coords dims))
  )

(defun find-boxes ()
  (ros::duration-sleep 1.0)
  (setq bboxes_msg (one-shot-subscribe *bounding-box-list*
				       jsk_recognition_msgs::BoundingBoxArray
				       :after-stamp (ros::time-now)))
  (setq bboxes (send bboxes_msg :boxes))
  (if (= (send (send (send (elt bboxes 0) :pose) :position) :x) 0)
      (setq bboxes '()))
  )

(defun if-dup-box (bbox_coords bbox_dims)
  (let* ((dup_flag nil)
	 (bbox_pos (send bbox_coords :pos)))
    (dotimes (i (length deco_coords_lst))
      (setq box_distance (norm (v- (send (elt deco_coords_lst i) :pos) bbox_pos)))
      (if (or (< box_distance (elt bbox_dims 0)) (< box_distance (elt bbox_dims 1)))
	  (setq dup_flag t)))
    dup_flag)
  )

(defun calc-mean-pos (bboxes)  ;; find center box pos
  (let* ((mean_x 0)
	 (mean_y 0)
	 (mean_z 0)
	 (box_num (length bboxes))
	 (mean_pos #f(0 0 0)))
    (dotimes (i box_num)
      (setq coords_dims_lst (bbox->lst (elt bboxes i)))
      (format t "coords_dim_lst ~A~%" coords_dims_lst)
      (setq pos (send (elt coords_dims_lst 0) :pos))
      (setq mean_x (+ mean_x (elt pos 0)))
      (setq mean_y (+ mean_y (elt pos 1)))
      (setq mean_z (+ mean_z (elt pos 2))))
    (setq mean_pos (float-vector mean_x mean_y mean_z))
    (setq mean_pos (scale (/ 1.0 box_num) mean_pos))
    mean_pos)
  )

(defun find-decoration ()
  (setq bboxes '())
  (dotimes (i 6)
    (go-vel-rotate (/ pi 6)))
  (find-boxes)
  ;; (when (= (length bboxes) 0)
  ;;   (go-vel-rotate (/ pi 10))
  ;;   (when (= (length bboxes 0))
  ;;     (go-vel-rotate (* -1 (/ pi 5)))
  ;;     ))
  (while (= (length bboxes) 0)
    (go-vel-rotate (/ pi 10))
    (find-boxes)
    )
  (format t "find ~A boxes~%" (length bboxes))
  )

(defun close-table ()
  (setq close_offset_x 100)
  (setq up_length_offset 50)
  (setq deco_pos (calc-mean-pos bboxes))
  (setq deco_z (elt deco_pos 2))
  (setq arm_end_pos (set-arm-end-pos))
  ;; (send *pr2* :l_wrist_flex_joint :joint-angle -114)  ;; original: -37.3571
  ;; (send *pr2* :r_wrist_flex_joint :joint-angle -114)
  ;; (send-robot 4000)
  (setq deco_pos (v- deco_pos arm_end_pos))
  (setq deco_pos (float-vector (elt deco_pos 0) (elt deco_pos 1) 0))
  (setq move_len (norm deco_pos))
  (setq move_len (- move_len close_offset_x))
  (setq move_rad (atan (/ (elt deco_pos 1) (elt deco_pos 0))))
  (format t "center pos: ~A -> len: ~A, rot: ~A~%" deco_pos move_len (rad2deg move_rad))
  (go-vel-rotate move_rad)
  ;; lift up
  (setq up_length (- deco_z (elt arm_end_pos 2)))
  (setq up_length (+ up_length up_length_offset))
  (setq lift_angle (+ (send *pr2* :torso_lift_joint :joint-angle) up_length))
  (format t "up torso: ~A~%" up_length)
  (send *pr2* :torso_lift_joint :joint-angle lift_angle)
  (send-robot 4000)
  (go-vel-linear move_len)
  (setq look_at_pos (set-arm-end-pos))  ;; use in get-deco-image
  (format t "look at ~A~%" look_at_pos)
  )

(defun get-deco-image ()
  ;; move arm out of camera view
  (setq cur_torso_joint (send *pr2* :torso_lift_joint :joint-angle))
  (send *pr2* :angle-vector #f(11.5 80.0 73.2972 3.97331 -121.542 -170.266 -5.72958 0.0 -80.0 73.297 -3.98539 -121.542 170.26 -5.72958 0.0 0.0 11.8773))
  (send *pr2* :torso_lift_joint :joint-angle cur_torso_joint)
  (send *pr2* :head :look-at look_at_pos)  ;; look_at_pos <- close-table
  (send-robot 4000)
  ;; get deco images
  (setq found_y -100)
  (setq look_y 500)
  (while (> look_y -300)
    (send *pr2* :head :look-at (v+ look_at_pos (float-vector 0 look_y 0)))
    (send-robot 1000)
    (find-boxes)
    (when (> (length bboxes) 0)
      (setq coords_dims_lst (bbox->lst (elt bboxes 0)))
      (setq deco_pos (send (elt coords_dims_lst 0) :pos))
      (setq found_y (elt deco_pos 1))
      (when (< (abs found_y) 10)
	(format t "find decoration pos: ~A~%" deco_pos)
	;; save deco info
	(setq image_raw-msg
	      (one-shot-subscribe *rgb-image-topic*
				  sensor_msgs::Image
				  :after-stamp (ros::time-now)))
	(setq deco_image_lst (append deco_image_lst image_raw_msg))
	(setq deco_image_pos_lst (append deco_image_pos_lst deco_pos)))
      (setq found_y -100)
      )
    (setq look_y (- look_y 20))
    )
  (format t "deco_image_pos_lst ~A~%" deco_image_pos_lst)
  )

(defun recognize-decoration ()
  (find-decoration)
  (close-table)
  )



;; send images to think_deco node

;; ---------------------------------------------------
;; arms out of view pose
;; (before-recog-pose)
;; (send *pr2* :l_shoulder_pan_joint :joint-angle 80)
;; (send *pr2* :r_shoulder_pan_joint :joint-angle -80)
;; (send *pr2* :r_wrist_roll_joint :joint-angle 0)
;; (send *pr2* :r_wrist_flex_joint :joint-angle 0)
;; (send *pr2* :r_elbow_flex_joint :joint-angle -125)
;; (send *pr2* :l_wrist_roll_joint :joint-angle 0)
;; (send *pr2* :l_wrist_flex_joint :joint-angle 0)
;; (send *pr2* :l_elbow_flex_joint :joint-angle -125)

(defun test-go-vel ()
   (setq pre_x 0)
   (convert-2D->3D 320 240)
   (setq wall_x cur_x)
   (setq arm_end_pos (set-arm-end-pos))
   (setq move_x (- cur_x (elt arm_end_pos 0)))
   (format t "move_x ~A~%" move_x)
   ;; (send *ri* :go-velocity move_x 0 0 time :wait t)
   ;; (send *ri* :wait-interpolation)
   (go-vel-linear move_x)
   )
