;; set pub sub topics
(ros::roseus-add-msgs "pr2eus_tutorials")
(setq *deco-pub-topic* "/think_deco/input_info")
(setq *deco-sub-topic* "/think_deco/output")
(setq *screenpoint-pub-topic* "/kinect_head/rgb/throttled/image_rect_color/screenpoint")
(setq *screenpoint-sub-topic* "/pointcloud_screenpoint_nodelet/output_point")
(setq *camera-frame* "head_mount_kinect_rgb_optical_frame")
(setq *base-frame* "base_footprint")
;;(setq *base-frame* "odom")
(ros::advertise *deco-pub-topic* pr2eus_tutorials::DecoImages 1)
(ros::advertise *screenpoint-pub-topic* geometry_msgs::PointStamped 1)
(ros::rate 10)

(defun deco-pos-cb (msg)
  (setq msg_arr (send msg :poses))
  (when (= (send (send (elt msg_arr 0) :position) :z) 1)
    ;; check to see if the information has been updated
    (if (= (length place_pos_lst) 0)
	(setq pre_x -1)
      (progn
	(setq pre_x (elt (elt place_pos_lst 0) 0))
	(setq place_pos '())))
    (dotimes (i (length msg_arr))
      (setq x (send (send (elt msg_arr i) :position) :x))
      (setq y (send (send (elt msg_arr i) :position) :y))
      (convert-2D->3D x y)
      (setq place_pos_lst (append place_pos_lst (list place_pos)))
      )
    (ros::unsubscribe *screenpoint-sub-topic*)
    (setq flag 1)
    (format t "place_pos_lst: ~A~%" place_pos_lst)
    )
  )


(defun get-place-pos ()
  (send dimg_pub_msg :header :stamp (ros::time-now))
  (setq flag 0)
  ;; (ros::subscribe *deco-sub-topic* geometry_msgs::PoseArray #'deco-pos-cb)
  (while (= flag 0)
    (ros::publish *deco-pub-topic* dimg_pub_msg)
    (unix:usleep (* 100 1000))
    (ros::spin-once))
  ;; (ros::unsubscribe *deco-sub-topic*)
  )


;; (get-place-pos)
;; (ros::exit)
