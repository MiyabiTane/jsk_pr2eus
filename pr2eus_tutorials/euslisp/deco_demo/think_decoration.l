;; set pub sub topics
(ros::roseus-add-msgs "pr2eus_tutorials")
(setq *deco-req-topic* "/think_deco")
(setq *xyz-uv-req-topic* "/xyz_to_screen_point")
(setq *screenpoint-pub-topic* "/kinect_head/rgb/throttled/image_rect_color/screenpoint")
(setq *screenpoint-sub-topic* "/pointcloud_screenpoint_nodelet/output_point")
(setq *camera-frame* "head_mount_kinect_rgb_optical_frame")
(setq *base-frame* "base_footprint")
;;(setq *base-frame* "odom")
(ros::advertise *screenpoint-pub-topic* geometry_msgs::PointStamped 1)
(ros::rate 10)

(defun convert-xyz-to-uv (xyz_lst)
  ;; *base-frame* 3D pos -> *camera-frame* 2D pos
  (let* ((xyz_req_msg (instance pr2eus_tutorials::PointStampedRequest :init))
	 (x (elt xyz_lst 0)) (y (elt xyz_lst 1)) (z (elt xyz_lst 2))
	 (coords (make-coords :pos (float-vector x y z)))
	 (pub-coords) (pub-pos) (result_msg))
    (setq pub-coords (send (send *tfl* :lookup-transform *camera-frame* *base-frame* (ros::time 0))
			   :transform coords))
    (setq pub-pos (send pub-coords :pos))
    (send (send xyz_req_msg :point) :x (elt pub-pos 0))
    (send (send xyz_req_msg :point) :y (elt pub-pos 1))
    (send (send xyz_req_msg :point) :z (elt pub-pos 2))

    ;; (format t "waiting service~%") ;;[~A ~A ~A to screenpoint] ...~%" x y z)
    (ros::wait-for-service *xyz-uv-req-topic*)
    (setq result_msg (ros::service-call *xyz-uv-req-topic* xyz_req_msg))
    ;; (format t "got service result~%" result_msg)
    result_msg)
  )

(defun get-corner-uv (pos dims)
  (let* ((lt_pos) (rt_pos) (lb_pos) (rb_pos)
	 (h_width (/ (elt dims 1) 2.0))
	 (h_length (/ (elt dims 0) 2.0))
	 (h_height (/ (elt dims 2) 2.0))
	 (h_width_m (* -1 h_width))
	 (h_length_m (* -1 h_length))
	 (h_height_m (* -1 h_height))
	 (lt_res) (rt_res) (lb_res) (rb_res))
    (setq lt_pos (v+ pos (float-vector h_length h_width h_height)))
    (setq rt_pos (v+ pos (float-vector h_length h_width_m h_height)))
    (setq lb_pos (v+ pos (float-vector h_length_m h_width h_height_m)))
    (setq rb_pos (v+ pos (float-vector h_length_m h_width_m h_height_m)))
    (setq lt_res (send (convert-xyz-to-uv lt_pos) :point))
    (setq rt_res (send (convert-xyz-to-uv rt_pos) :point))
    (setq lb_res (send (convert-xyz-to-uv lb_pos) :point))
    (setq rb_res (send (convert-xyz-to-uv rb_pos) :point))
    (format t "xs: ~A~%" (list (send lt_res :x) (send rt_res :x) (send lb_res :x) (send rb_res :x)))
    (format t "ys: ~A~%" (list (send lt_res :y) (send rt_res :y) (send lb_res :y) (send rb_res :y)))
    (list (list (send lt_res :x) (send rt_res :x) (send lb_res :x) (send rb_res :x))
	  (list (send lt_res :y) (send rt_res :y) (send lb_res :y) (send rb_res :y)))
    )
  )

(defun set-pub-msg ()
  (let* ((pos_lst_msg '())
	 (dims_lst_msg '())
	 (pos_msg (instance geometry_msgs::Point :init))
	 (dims_msg (instance geometry_msgs::Point :init))
	 (deco_box)
	 (pos)
	 (dims)
	 (xs_ys_lst)
	 (rec_uv_msg (instance jsk_recognition_msgs::PlotData :init))
	 (plane_norm_vec)
	 (visual_point_msg (instance geometry_msgs::Point :init)))
    (send dimg_req_msg :header :stamp (ros::time-now))
    (dotimes (i (length bboxes))
      (setq deco_box (elt bboxes i))
      (setq box_cd_lst (bbox->lst deco_box))
      (setq pos (send (elt box_cd_lst 0) :pos))
      (setq dims (elt box_cd_lst 1))
      (format t "pos: ~A, dims ~A~%" pos dims)
      (setq pos_msg (instance geometry_msgs::Point :init))
      (setq dims_msg (instance geometry_msgs::Point :init))
      (send pos_msg :x (elt pos 0))
      (send pos_msg :y (elt pos 1))
      (send pos_msg :z (elt pos 2))
      (send dims_msg :x (elt dims 0))
      (send dims_msg :y (elt dims 1))
      (send dims_msg :z (elt dims 2))
      ;; calc corners uv pos
      ;; (format t "corner uv: ~A~%" (get-corner-uv pos dims))
      (setq rec_uv_msg (instance jsk_recognition_msgs::PlotData :init))
      (setq xs_ys_lst (get-corner-uv pos dims))
      (send rec_uv_msg :xs (elt xs_ys_lst 0))
      (send rec_uv_msg :ys (elt xs_ys_lst 1))
      (send dimg_req_msg :decos_rec_uv (append (send dimg_req_msg :decos_rec_uv) (list rec_uv_msg)))

      (send dimg_req_msg :decos_pos (append (send dimg_req_msg :decos_pos) (list pos_msg)))
      (send dimg_req_msg :decos_dims (append (send dimg_req_msg :decos_dims) (list dims_msg)))
      )
    ;; head angle
    (setq angle_msg (instance std_msgs::Float64 :init))
    (send angle_msg :data (send *pr2* :head_tilt_joint :joint-angle))
    (send dimg_req_msg :head_angle angle_msg)
    ))

(defun store-result (result_pos)
  (let* ((x) (y))
    (setq result_arr (send result_pos :poses))
    (setq pre_x -1)
    (dotimes (i (length result_arr))
      (setq x (send (send (elt result_arr i) :position) :x))
      (setq y (send (send (elt result_arr i) :position) :y))
      ;; (format t "x: ~A, y: ~A~%" x y)
      (convert-2D->3D x y *wall-pcl*)
      ;; (format t "result_3d_pos: ~A~%" result_3d_pos)
      (setq place_pos_lst (append place_pos_lst (list result_3d_pos)))
      )
    (format t "place_pos_lst: ~A~%" place_pos_lst)
    )
  )

(defun get-place-pos ()
  (set-pub-msg)
  (format t "waiting service ...~%")
  (ros::wait-for-service *deco-req-topic*)
  (setq result_msg (ros::service-call *deco-req-topic* dimg_req_msg))
  (format t "got service result~%")
  (store-result (send result_msg :result_pos))
  )
