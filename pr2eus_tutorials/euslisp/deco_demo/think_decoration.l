;; set pub sub topics
(ros::roseus-add-msgs "pr2eus_tutorials")
(setq *deco-req-topic* "/think_deco")
(setq *screenpoint-pub-topic* "/kinect_head/rgb/throttled/image_rect_color/screenpoint")
(setq *screenpoint-sub-topic* "/pointcloud_screenpoint_nodelet/output_point")
(setq *camera-frame* "head_mount_kinect_rgb_optical_frame")
(setq *base-frame* "base_footprint")
;;(setq *base-frame* "odom")
(ros::advertise *screenpoint-pub-topic* geometry_msgs::PointStamped 1)
(ros::rate 10)


(defun store-result (result_pos)
  (let* ((x) (y))
    (setq result_arr (send result_pos :poses))
    (setq pre_x -1)
    (dotimes (i (length result_arr))
      (setq x (send (send (elt result_arr i) :position) :x))
      (setq y (send (send (elt result_arr i) :position) :y))
      ;; (format t "x: ~A, y: ~A~%" x y)
      (convert-2D->3D x y *wall-pcl*)
      ;; (format t "result_3d_pos: ~A~%" result_3d_pos)
      (setq place_pos_lst (append place_pos_lst (list result_3d_pos)))
      )
    (format t "place_pos_lst: ~A~%" place_pos_lst)
    )
  )

(defun get-place-pos ()
  (send dimg_req_msg :header :stamp (ros::time-now))
  (format t "waiting service ...~%")
  (ros::wait-for-service *deco-req-topic*)
  (setq result_msg (ros::service-call *deco-req-topic* dimg_req_msg))
  (format t "got service result~%")
  (store-result (send result_msg :result_pos))
  )

